colnames(batting)
head(batting)
summary(batting)
str(batting)
filter(batting, yearID > 2005, G > 130)
mutate(batting, rbi2 = if(is.null(AB)) 1.0 * R / AB else 0)
library(Lahman)
packageVersion("Lahman")
batting <- tbl_df(Batting)
library(dplyr)
batting <- tbl_df(Batting)
colnames(batting)
names(batting)
select(batting, playerID:lgID)
arrange(batting, playerID, desc(yearID))
players <- group_by(batting, playerID)
head(group_size(players), 100)
players <- group_by(batting, playerID)
head(group_size(players))
?'%>%'
any(grepl("mapproj",
installed.packages()))
library(mapproj)
any(grepl("maps",
installed.packages()))
help(maps,mapproj)
??maps
?map_state
??map_state
??map_data
any(grepl("R.rsp",
installed.packages()))
packageVersion("R.rsp")
install.packages("R.rsp")
any(grepl("R.rsp",
installed.packages()))
packageVersion("R.rsp")
library(dplyr)
help(dplyr)
browseVignettes(package = "dplyr")
help(package = "dplyr")
library(Lahman)
data("Batting")
str(batting)
str(Batting)
head(Batting)
help(Batting)
batting_tbl <- tbl_df(Batting)
head(batting_tbl)
class(batting_tbl)
?tbl_df
filter(batting, yearID > 2005, G > 130)
filter(batting_tbl, yearID > 2005, G > 130)
select(batting, playerID:lgID)
select(batting_tbl, playerID:lgID)
arrange(batting, playerID, desc(yearID))
summarise(batting, G = mean(G), n = n())
arrange(batting_tbl, playerID, desc(yearID))
summarise(batting_tbl, G = mean(G), n = n())
mutate(batting_tbl, rbi2 = if(is.null(AB)) 1.0 * R / AB else 0)
lam <-mutate(batting_tbl, rbi2 = if(is.null(AB)) 1.0 * R / AB else 0)
lam$rbi2
player_info <- select(tbl_df(Master), playerID, birthYear)
head(player_info)
hof <- select(filter(tbl_df(HallOfFame), inducted == "Y"),
playerID, votedBy, category)
head(hof)
head(HallOfFame)
inner_join(player_info, hof)
left_join(player_info, hof)
semi_join(player_info, hof)
anti_join(player_info, hof)
lead(1:10, 1)
lead(1:10, 2)
lag(1:10, 1)
lag(1:10, 2)
x <- runif(5)
cbind(ahead = lead(x), x, behind = lag(x))
df <- data.frame(year = 2000:2005, value = (0:5) ^ 2)
scrambled <- df[sample(nrow(df)), ]
scrambled
wrong <- mutate(scrambled, prev = lag(value))
wrong
arrange(wrong, year)
right <- mutate(scrambled, prev = lag(value, order_by = year))
right
arrange(right, year)
with(scrambled, prev = lag(value, order_by = year))
?with
with(scrambled, {prev = lag(value, order_by = year)})
scrambled
with(scrambled, {prev = lag(value, order_by = year) summary(scrambled)})
with(scrambled, {prev = lag(value, order_by = year)})
sam <- with(scrambled, {prev = lag(value, order_by = year)})
sam
library(shiny)
help(package= shiny)
?prepare_download
?prepare_downloads
??prepare_downloads
??prepare_downolads
library(data.table)
??prepare_downloads
library(reshape2)
??prepare_downloads
library(maps)
library(ggplot2)
library(rCharts)
library(ggvis)
??prepare_downloads
library(mapproj)
??prepare_downloads
library(markdown)
??prepare_downloads
?dataTable()
?downloadHandler
help(package= "shinyapps")
help(package= "shiny")
install.packages("pryr")
library(pryr)
help(package= pryr)
ftype(`%in%`)
ftype(t.test)
library(BH)
?prepare_downloads
library(DT)
?prepare_downloads
library(manipulate)
?prepare_downloads
library(manipulate)
data(cars)
str(cars)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
?dTable
??dTable
dTable(airquality, sPaginationType = "full_numbers")
?dTable
install.packages("base64enc")
?dTable
??dTable
library("base64enc")
help(package="base64enc")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'), # Missing a comma in the sidebar panel
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
runExample("01_hello")
runApp("App-1")
runApp("App-1",display.mode='showcase')
library(UsingR)
data(galton)
str(galton)
library(DT)
?dTable
?dTabel
library(dplyr)
?dTable
methods("mean")
?methods
methods(summary)
methods(class = "aov")
methods("[[")
methods("Math")
library(Matrix)
print(methods(class = "Matrix"))
methods("dTable")
m <- methods("dim")
print(m)
print(attr(m, "info"))
exists("predict.ppr") # false
getS3method("predict", "ppr")
showMethods("show")
getS3method(<generic>, <class>)
getS3method("generic", "class")
getS3method("print", "maps")
getS3method("print", "plot")
getS3method("show", "Module")
getS3method("print", "Matrix")
getmethod("print", "Matrix")
getMethod("print", "Matrix")
getS3method("print", "line")
getS3method("print", "default")
head(getS3method("mean", "default"), 10)
?setMethod
dput(mtcars)
mtcars <-structure(list(mpg = c(21, 21, 22.8, 21.4, 18.7, 18.1, 14.3,
24.4, 22.8, 19.2, 17.8, 16.4, 17.3, 15.2, 10.4, 10.4, 14.7, 32.4,
30.4, 33.9, 21.5, 15.5, 15.2, 13.3, 19.2, 27.3, 26, 30.4, 15.8,
19.7, 15, 21.4), cyl = c(6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8,
8, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 8, 6, 8, 4),
disp = c(160, 160, 108, 258, 360, 225, 360, 146.7, 140.8,
167.6, 167.6, 275.8, 275.8, 275.8, 472, 460, 440, 78.7, 75.7,
71.1, 120.1, 318, 304, 350, 400, 79, 120.3, 95.1, 351, 145,
301, 121), hp = c(110, 110, 93, 110, 175, 105, 245, 62, 95,
123, 123, 180, 180, 180, 205, 215, 230, 66, 52, 65, 97, 150,
150, 245, 175, 66, 91, 113, 264, 175, 335, 109), drat = c(3.9,
3.9, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,
3.07, 3.07, 3.07, 2.93, 3, 3.23, 4.08, 4.93, 4.22, 3.7, 2.76,
3.15, 3.73, 3.08, 4.08, 4.43, 3.77, 4.22, 3.62, 3.54, 4.11
), wt = c(2.62, 2.875, 2.32, 3.215, 3.44, 3.46, 3.57, 3.19,
3.15, 3.44, 3.44, 4.07, 3.73, 3.78, 5.25, 5.424, 5.345, 2.2,
1.615, 1.835, 2.465, 3.52, 3.435, 3.84, 3.845, 1.935, 2.14,
1.513, 3.17, 2.77, 3.57, 2.78), qsec = c(16.46, 17.02, 18.61,
19.44, 17.02, 20.22, 15.84, 20, 22.9, 18.3, 18.9, 17.4, 17.6,
18, 17.98, 17.82, 17.42, 19.47, 18.52, 19.9, 20.01, 16.87,
17.3, 15.41, 17.05, 18.9, 16.7, 16.9, 14.5, 15.5, 14.6, 18.6
), vs = c(0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,
0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1), am = c(1,
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1), gear = c(4, 4, 4, 3,
3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3,
3, 3, 4, 5, 5, 5, 5, 5, 4), carb = c(4, 4, 1, 1, 2, 1, 4,
2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2, 2, 4, 2, 1,
2, 2, 4, 6, 8, 2)), .Names = c("mpg", "cyl", "disp", "hp",
"drat", "wt", "qsec", "vs", "am", "gear", "carb"), row.names = c("Mazda RX4",
"Mazda RX4 Wag", "Datsun 710", "Hornet 4 Drive", "Hornet Sportabout",
"Valiant", "Duster 360", "Merc 240D", "Merc 230", "Merc 280",
"Merc 280C", "Merc 450SE", "Merc 450SL", "Merc 450SLC", "Cadillac Fleetwood",
"Lincoln Continental", "Chrysler Imperial", "Fiat 128", "Honda Civic",
"Toyota Corolla", "Toyota Corona", "Dodge Challenger", "AMC Javelin",
"Camaro Z28", "Pontiac Firebird", "Fiat X1-9", "Porsche 914-2",
"Lotus Europa", "Ford Pantera L", "Ferrari Dino", "Maserati Bora",
"Volvo 142E"), class = "data.frame")
packageVersion("Shiny")
?`%then%`
library(Shiny)
library(shiny)
?`%then%`
??`%then%`
`%then%` <- shiny:::`%OR%`
?numericInput
?dateInput
library(rCharts)
?show
?nplot
?nPlot
require(rCharts); library(datasets); library(knitr)
?nPlot
library(shiny)
?nPlot
library(slidify)
?nPlot
haireye = as.data.frame(HairEyeColor)
# create a nPlot object
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',data = subset(haireye, Sex == 'Male'))
# save the nPlot object to a html page
n1$show("inline", include_assets = TRUE, cdn = F)
n1
?nPlot
package.skeleton()
---
# Problem 1.
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
?dTable
help(package="rCharts")
install.packages(c("car", "CORElearn", "devtools", "dplyr", "jsonlite", "lpSolve", "mime", "quantreg", "raster", "Rcpp", "RcppArmadillo", "satellite", "sp", "xml2"))
library(rCharts)
names(iris) <- gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data=iris, color='Species', type='point')
r1$save('fig/r1.html', cdn=T)
cat('<iframe src="fig/r1.html", width=100%, height=500></iframe>')
r1$save('fig/r1.html', cdn=T)
setwd("~/R_work/new-App/www")
r1$save('fig/r1.html', cdn=T)
setwd("~/R_work")
r1$save('fig/r1.html', cdn=T)
cat('<iframe src="fig/r1.html", width=100%, height=500></iframe>')
hair_eye <- as.data.frame(HairEyeColor)
r2 <- rPlot(Freq ~ Hair | Eye, color='Eye', data=hair_eye, type='bar')
r2$save('fig/r2.html', cdn=T)
cat('<iframe src="fig/r2.html" width=100%, height=600></iframe>')
r1 <- rPlot(mpg ~ wt | am + vs, data=mtcars, type="point", color="geat")
r1$print("chart1")
r1$save("myPlot.html")r1$publish("myPlot", host='gist')
r1$save("myPlot.html")r1$publish("myPlot", host='gist')
r1$save("myPlot.html")
r1$publish("myPlot", host='gist')
r1$publish("myPlot, host='rpubs")
morrisdata(economics, package="ggplot2")
data(economics)
library(ggplot2)
data(economics)
econ <- transform(economics, date=as.character(date))
str(econ)
m1 <- mPlot(x="date", y=c("psavert", "uempmed"), type="Line", data=econ)
m1$set(pointSize=0, lineWidth=1)m1$save('fig/m1.html', cdn=T)
cat('<iframe src="fig/m1.html" width=100%, height=600></iframe>')
m1$set(pointSize=0, lineWidth=1)m1$save('fig/m1.html', cdn=T)
cat('<iframe src="fig/m1.html" width=100%, height=600></iframe>')
m1$set(pointSize=0, lineWidth=1)
m1$save('fig/m1.html', cdn=T)
uspexp <- melt(USPersonalExpenditure)
names(uspexp)[1:2]=c("category", "year")
x1 <- xPlot(value ~ year, group="category", data=uspexp, type="line-dotted")
x1$save('fig/x1.html', cdn=TRUE)
cat('<iframe src="fig/x1.html" width=100%, height=600></iframe>')
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom=13)
map3$marker(c(51.5, -0.09), bindPopup="<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup="<p> Hi. I am another popup </p>")
map3$save('fig/map3.html', cdn=TRUE)
cat('<iframe src="fig/map3.html" width=100%, height=600></iframe>')
usp <- reshape2::melt(USPersonalExpenditure)
usp$Var2 <- as.numeric(as.POSIXct(paste0(usp$Var2, "-01-01")))
p4 <- Rickshaw$new()
p4$layer(value ~ Var2, group="Var1", data=usp, type="area", width=560)
p4$set(slider=TRUE)
p4$save('fig/p4.html', cdn=TRUE)
cat('<iframe src="fig/p4.html" width=100%, height=600></iframe>')
h1 <- hPlot(x="Wr.Hnd", y="NW.Hnd", data=MASS::survey, type=c("line", "bubble", "scatter"), group="Clap", size="Age")
h1$save('fig/h1.html', cdn=TRUE)
cat('<iframe src="fig/h1.html" width=100%, height=600></iframe>')
(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))print(M, "chart")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
print(M, "chart")
G <- gvisGeoChart(Exports, locationvar="Country", colorvar="Profit", options=list(width=60, height=400))
print(G, "chart")
G2 <- gvisGeoChart(Exports, locationvar="Country", colorvar="Profit", options=list(width=600, height=400, region="150"))
print(G2, "chart")
demo(googleVis)
data(iris)
ggiris <- qplot(Petal.Width, Sepal.Length, data = iris, color = Species)
ggirispy <- plotly()
install.packages("plotly")
install.packages("viridis") # dependency
install.packages("devtools")
devtools::install_github("ropensci/plotly")
plotly:::verify("Luma")
plotly:::verify("rz8d3f7qzx")
library(plotly)
set_credentials_file("Luma","rz8d3f7qzx")
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
plotly:::verify("Luma")
Sys.setenv("plotly_username"="Luma")
Sys.setenv("plotly_api_key"="rz8d3f7qzx")
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
library(ggplot2)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
py <- plotly("RgraphingAPI", "ektgzomjbx")
signup("Luma", "summar7@gmail.com")
plotly:::verify("Luma")
plotly:::verify("rz8d3f7qzx")
library("devtools")
install_github("ggthemes", "jrnold")
library(plotly)
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
ggiris <- qplot(Petal.Width, Sepal.Length, data = iris, color = Species)
ggirispy <- plotly()
r <- py$ggplotly(ggiris)r$response$url
library(slidify)
library(slidifyLibraries)
library(rCharts)
getwd()
?fileInput
??fileInput
?session
?sessionInfo
?session$clientdata
?ClientData
?parseQueryString
library(shiny)
?parseQueryString
?reactiveValues
?session
setwd("~/R_work/Rproject")
shiny::runApp()
?brewer.all
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/R_work/census-app")
shiny::runApp()
counties <- readRDS("data/counties.rds")
names(counties)
shiny::runApp('~/R_work/chart-App')
shiny::runApp()
library(dplyr)
getwd()
setwd("~/R_work/shiny-practise/my presentation-figure")
setwd("~/R_work/shiny-practise")
setwd("~/R_work")
shiny::runApp('Rproject')
shiny::runApp('Rproject')
shiny::runApp('Rproject')
shiny::runApp('Rproject')
shiny::runApp('Rproject')
install.packages("SnowballC")
library("tm");library("SnowballC");library("wordcloud") library("RColorBrewer")
library(wordcloud)
sessionInfo()
filePath <- "http://www.sthda.com/sthda/RDoc/example-files/martin-luther-king-i-have-a-dream-speech.txt"
text <- readLines(filePath) # Load the data as a corpus
docs <- Corpus(VectorSource(text))
inspect(docs)
toSpace <- content_transformer(function (x , pattern )
gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, removeWords, stopwords("english"))
docs = tm_map(docs, removeWords,
c(stopwords("SMART"), "thy", "thou", "thee", "the", "and", "but"))
# Remove the Whitespaces.
docs <- tm_map(docs, stripWhitespace)
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
tableOutput(head(d, 10))
table(head(d, 10))
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
findFreqTerms(dtm, lowfreq = 4)
findAssocs(dtm, terms = "freedom", corlimit = 0.3)
barplot(d[1:10,]$freq, las = 2, names.arg = d[1:10,]$word,
col ="lightblue", main ="Most frequent words",
ylab = "Word frequencies")
getwd()
install.packages("twitteR")
library(twitteR)
library(tm)
library(wordcloud)
library(RColorBrewer)
mach_tweets = searchTwitter("machine learning", n=500, lang="en")
help(package="wordcloud")
library(pryr)
help(package="pryr")
mem_used()
where("where")
x <- 1
where("x")
z <- list(x, x, x)
compare_size(z)
ftype(`%in%`)
ftype(sum)
ftype(t.data.frame)
ftype(t.test)
ftype(writeLines)
ftype(unlist)
ftype(mean)
ftype(show)
ftype(lm) # [1] "function"
ftype(colSums) # [1] "internal"
ftype(dgamma) # [1] "function"
?dgamma
showMethods("show")
getMethod(show)
?install.packages
install.packages("C:/Users/sahera/Downloads/DDPQuiz3_1.0.zip", repos = NULL, type = "win.binary")
library(DDPQuiz3)
library(DDPQuiz3_1.0)
setwd("~/R_work/Rproject")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
